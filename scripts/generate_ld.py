#!/usr/bin/env python3

import os
import subprocess
import shutil
import struct
import sys

if sys.platform.startswith('win'):
    PathVar = os.environ.get('Path')
    Paths = PathVar.split(';')
    PATH = ''
    for candidatePath in Paths:
        if 'devkitARM' in candidatePath:
            PATH = candidatePath
            break
    if PATH == '':
        PATH = 'C://devkitPro//devkitARM//bin'
        if os.path.isdir(PATH) is False:
            print('Devkit not found.')
            sys.exit(1)

    PREFIX = 'arm-none-eabi-'
    OBJDUMP = os.path.join(PATH, PREFIX + 'objdump')
    NM = os.path.join(PATH, PREFIX + 'nm')
    AS = os.path.join(PATH, PREFIX + 'as')

else:  # Linux, OSX, etc.
    if os.path.exists('/opt/devkitpro/devkitARM/bin/'):
        PREFIX = '/opt/devkitpro/devkitARM/bin/arm-none-eabi-'
    else:
        PREFIX = 'arm-none-eabi-'
    OBJDUMP = (PREFIX + 'objdump')
    if sys.platform.startswith('darwin'):
        NM = ('nm')
    else:
        NM = (PREFIX + 'nm')
    AS = (PREFIX + 'as')


def GetTextSection() -> int:
    try:
        # Dump sections
        out = subprocess.check_output([OBJDUMP, '-t', 'build/linked.o'])
        lines = out.decode().split('\n')

        # Find text section
        text = filter(lambda x: x.strip().endswith('.text'), lines)
        section = (list(text))[0]

        # Get the offset
        offset = int(section.split(' ')[0], 16)
        return offset

    except:
        print("Error: The new linker script could not be created.\n"
              + "The linker symbol file was not found. Most likely the compilation process was not completed.")
        sys.exit(1)


def GetSymbols(subtract=0) -> {str: int}:
    out = subprocess.check_output([NM, 'build/linked.o'])
    lines = out.decode().split('\n')

    ret = {}
    for line in lines:
        parts = line.strip().split()

        if len(parts) < 3:
            continue

        if parts[1].lower() not in {'t', 'd'}:
            continue

        offset = int(parts[0], 16)
        ret[parts[2]] = offset - subtract
        if parts[1].lower() in {'t'}:
            ret[parts[2]] = ret[parts[2]] + 1

    return ret


def writeall():
    print("Generating linker script...")
    table = GetSymbols()
    
    #shutil.copy("rom.ld", "rom_gen.ld")

    if os.path.isfile('rom_gen.ld'):
        offsetIni = open('rom_gen.ld', 'a')
    else:
        offsetIni = open('rom_gen.ld', 'w')
    
    offsetIni.truncate()
    offsetIni.write("\n/* begin autogenerated portion */\n\n")
    for key in sorted(table.keys()):
        offsetIni.write(key + ' = ' + hex(table[key]) + ';\n')
    offsetIni.close()


if __name__ == '__main__':
    writeall()
