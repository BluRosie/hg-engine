#!/usr/bin/env python3
import json
import os
import argparse
from typing import Dict, Any, List, Tuple, Union

BEGINNING_OF_FILE = """// DO NOT MODIFY THIS FILE!  autogenerated by scripts/itemdata.py
#include "../../include/types.h"
#include "../../include/item.h"
#include "../../include/constants/hold_item_effects.h"
#include "../../include/constants/item.h"
#include "../../include/battle.h"


u32 __size = sizeof(ITEMDATA);


const ITEMDATA __data[] =
{
"""

END_OF_FILE = """
};
"""


def emit_value(v: Any) -> str:
    # Strings are emitted raw so C identifiers (e.g., TYPE_NORMAL) remain identifiers.
    if isinstance(v, str):
        return v
    if isinstance(v, bool):
        return "TRUE" if v else "FALSE"
    return str(v)


def emit_item_block(item_macro: str, obj: Dict[str, Any]) -> str:
    p = obj
    u = p["partyUseParam"]
    return f"""
[{item_macro}] =
{{
    .price = {emit_value(p["price"])},
    .holdEffect = {emit_value(p["holdEffect"])},
    .holdEffectParam = {emit_value(p["holdEffectParam"])},
    .pluckEffect = {emit_value(p["pluckEffect"])},
    .flingEffect = {emit_value(p["flingEffect"])},
    .flingPower = {emit_value(p["flingPower"])},
    .naturalGiftPower = {emit_value(p["naturalGiftPower"])},
    .naturalGiftType = {emit_value(p["naturalGiftType"])},
    .prevent_toss = {emit_value(p["prevent_toss"])},
    .selectable = {emit_value(p["selectable"])},
    .fieldPocket = {emit_value(p["fieldPocket"])},
    .battlePocket = {emit_value(p["battlePocket"])},
    .fieldUseFunc = {emit_value(p["fieldUseFunc"])},
    .battleUseFunc = {emit_value(p["battleUseFunc"])},
    .partyUse = {emit_value(p["partyUse"])},
    .partyUseParam = {{
        .slp_heal = {emit_value(u["slp_heal"])},
        .psn_heal = {emit_value(u["psn_heal"])},
        .brn_heal = {emit_value(u["brn_heal"])},
        .frz_heal = {emit_value(u["frz_heal"])},
        .prz_heal = {emit_value(u["prz_heal"])},
        .cfs_heal = {emit_value(u["cfs_heal"])},
        .inf_heal = {emit_value(u["inf_heal"])},
        .guard_spec = {emit_value(u["guard_spec"])},
        .revive = {emit_value(u["revive"])},
        .revive_all = {emit_value(u["revive_all"])},
        .level_up = {emit_value(u["level_up"])},
        .evolve = {emit_value(u["evolve"])},
        .atk_stages = {emit_value(u["atk_stages"])},
        .def_stages = {emit_value(u["def_stages"])},
        .spatk_stages = {emit_value(u["spatk_stages"])},
        .spdef_stages = {emit_value(u["spdef_stages"])},
        .speed_stages = {emit_value(u["speed_stages"])},
        .accuracy_stages = {emit_value(u["accuracy_stages"])},
        .critrate_stages = {emit_value(u["critrate_stages"])},
        .pp_up = {emit_value(u["pp_up"])},
        .pp_max = {emit_value(u["pp_max"])},
        .pp_restore = {emit_value(u["pp_restore"])},
        .pp_restore_all = {emit_value(u["pp_restore_all"])},
        .hp_restore = {emit_value(u["hp_restore"])},
        .hp_ev_up = {emit_value(u["hp_ev_up"])},
        .atk_ev_up = {emit_value(u["atk_ev_up"])},
        .def_ev_up = {emit_value(u["def_ev_up"])},
        .speed_ev_up = {emit_value(u["speed_ev_up"])},
        .spatk_ev_up = {emit_value(u["spatk_ev_up"])},
        .spdef_ev_up = {emit_value(u["spdef_ev_up"])},
        .friendship_mod_lo = {emit_value(u["friendship_mod_lo"])},
        .friendship_mod_med = {emit_value(u["friendship_mod_med"])},
        .friendship_mod_hi = {emit_value(u["friendship_mod_hi"])},
        .hp_ev_up_param = {emit_value(u["hp_ev_up_param"])},
        .atk_ev_up_param = {emit_value(u["atk_ev_up_param"])},
        .def_ev_up_param = {emit_value(u["def_ev_up_param"])},
        .speed_ev_up_param = {emit_value(u["speed_ev_up_param"])},
        .spatk_ev_up_param = {emit_value(u["spatk_ev_up_param"])},
        .spdef_ev_up_param = {emit_value(u["spdef_ev_up_param"])},
        .hp_restore_param = {emit_value(u["hp_restore_param"])},
        .pp_restore_param = {emit_value(u["pp_restore_param"])},
        .friendship_mod_lo_param = {emit_value(u["friendship_mod_lo_param"])},
        .friendship_mod_med_param = {emit_value(u["friendship_mod_med_param"])},
        .friendship_mod_hi_param = {emit_value(u["friendship_mod_hi_param"])},
    }},
}},
"""


if __name__ == "__main__":
    data = {}
    with open("data/itemdata/items.json", "r", encoding="utf-8") as jf:
        data = json.load(jf)

    output_file = "build/itemdata/itemdata2.c" # TODO
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, "w", encoding="utf-8") as out:
        out.write(BEGINNING_OF_FILE)
        for macro, obj in data.items():
            if not isinstance(macro, str) or not macro.startswith("ITEM_"):
                raise SystemExit(f"Invalid key {macro!r}: must start with 'ITEM_'.")
            out.write(emit_item_block(macro, obj))
        out.write(END_OF_FILE)

    print(f"Processing complete. Saved to '{output_file}'")
