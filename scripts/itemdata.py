import pandas as pd

BEGINNING_OF_FILE = """// DO NOT MODIFY THIS FILE!  autogenerated by scripts/itemdata.py
#include "../../include/types.h"
#include "../../include/item.h"
#include "../../include/constants/hold_item_effects.h"
#include "../../include/constants/item.h"
#include "../../include/battle.h"


u32 __size = sizeof(ITEMDATA);


const ITEMDATA __data[] =
{
"""

END_OF_FILE = """
};
"""


def process_csv(input_file, output_file='build/itemdata/itemdata.c'):
    try:
        # Read the input CSV
        # df = pd.read_csv(input_file)
        df = pd.read_csv(input_file, dtype=object)
        df.columns = df.columns.str.replace(' ', '')
        
        # We don't care about types
        df = df.astype(str)
        
        with open(output_file, "w") as file:
            file.write(BEGINNING_OF_FILE)
            for index, row in df.iterrows():
                # TODO:
                # prevent_toss should be TRUE for all items
                text = f"""
[{row['ItemName']}] =
{{
    .price = {row['Price']},
    .holdEffect = {row['EquipEffect']},
    .holdEffectParam = {row['EquipPower']},
    .pluckEffect = {row['PluckEffect']},
    .flingEffect = {row['ThrowEffect']},
    .flingPower = {row['ThrowPower']},
    .naturalGiftPower = {row['NaturalGiftPower']},
    .naturalGiftType = {row['NaturalGiftType']},
    .prevent_toss = {row['prevent_toss']},
    .selectable = {row['selectable']},
    .fieldPocket = {row['FieldPocket']},
    .battlePocket = {row['battlePocket']},
    .fieldUseFunc = {row['fieldUseFunc']},
    .battleUseFunc = {row['battleUseFunc']},
    .partyUse = {row['partyUse']},
    .partyUseParam = {{
        .slp_heal = {row['WorkRecvSleep']},
        .psn_heal = {row['WorkRecvPoison']},
        .brn_heal = {row['WorkRecvBurn']},
        .frz_heal = {row['WorkRecvFreeze']},
        .prz_heal = {row['WorkRecvParalyze']},
        .cfs_heal = {row['WorkRecvConfuse']},
        .inf_heal = {row['inf_heal']},
        .guard_spec = {row['guard_spec']},
        .revive = {row['revive']},
        .revive_all = {row['revive_all']},
        .level_up = {row['WorkLevel']},
        .evolve = {row['evolve']},
        .atk_stages = {row['WorkAttack']},
        .def_stages = {row['WorkDefense']},
        .spatk_stages = {row['WorkSpAttack']},
        .spdef_stages = {row['spdef_stages']},
        .speed_stages = {row['WorkSpeed']},
        .accuracy_stages = {row['WorkAccuracy']},
        .critrate_stages = {row['WorkCritical']},
        .pp_up = {'TRUE' if row['WorkPpUp'] == '1' else 'FALSE'},
        .pp_max = {'TRUE' if row['WorkPpUp'] == '2' else 'FALSE'},
        .pp_restore = {'TRUE' if row['WorkPpRcv'] == '10' else 'FALSE'},
        .pp_restore_all = {'TRUE' if row['WorkPpRcv'] == '127' else 'FALSE'},
        .hp_restore = {row['hp_restore']},
        .hp_ev_up = {row['hp_ev_up']},
        .atk_ev_up = {row['atk_ev_up']},
        .def_ev_up = {row['def_ev_up']},
        .speed_ev_up = {row['speed_ev_up']},
        .spatk_ev_up = {row['spatk_ev_up']},
        .spdef_ev_up = {row['spdef_ev_up']},
        .friendship_mod_lo = {row['friendship_mod_lo']},
        .friendship_mod_med = {row['friendship_mod_med']},
        .friendship_mod_hi = {row['friendship_mod_hi']},
        .hp_ev_up_param = {row['WorkStatusHp']},
        .atk_ev_up_param = {row['WorkStatusAtk']},
        .def_ev_up_param = {row['WorkStatusDef']},
        .speed_ev_up_param = {row['WorkStatusSpd']},
        .spatk_ev_up_param = {row['WorkStatusSAtk']},
        .spdef_ev_up_param = {row['WorkStatusSDef']},
        .hp_restore_param = {row['hp_restore_param']},
        .pp_restore_param = {row['pp_restore_param']},
        .friendship_mod_lo_param = {row['friendship_mod_lo_param']},
        .friendship_mod_med_param = {row['friendship_mod_med_param']},
        .friendship_mod_hi_param = {row['friendship_mod_hi_param']},
    }},
}},
"""
                file.write(text)

            # Save the result
            file.write(END_OF_FILE)
            
        print(f"Processing complete. Saved to '{output_file}'")
        
    except FileNotFoundError:
        print(f"Error: Could not find input file '{input_file}'")


if __name__ == '__main__':
    process_csv('data/itemdata/itemdata.csv', 'build/itemdata/itemdata.c')
